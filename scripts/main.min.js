(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// --- main --- //

// avoid doing anything on older browsers
if(!document.addEventListener) return false;

// load History
var history = require("./plugins/history");

// load everything else
require("./ui/ajax");
require("./ui/general");

// init
$(document).ready(function() {
    
    // init history js
    history.load({
        replacements: [
            // TODO title, description, en/fr switch
            {source : '.js-ajax', destination : '.js-ajax'}
        ]
    });

});
},{"./plugins/history":5,"./ui/ajax":7,"./ui/general":8}],2:[function(require,module,exports){

/** 
 * PageManager
 *  - manages creating new pages via underscore templating
 *    with template/asset caching and page transition animations
 *
 * @author Michael Roth <mroth@highbridgecreative.com>
 * @version 1.0.0
 */
var PageManager = function(params) {

    // instance vars
    this.pages = {};
    this.currentPage = '';

    /** 
     * Page
     *  - a page object used 
     *    to create a new page
     */
    this.Page = function(params) {

        this.id = params.id; // page id
        this.contents = params.contents; // page raw html contents
        this.template = null; // the page _.template
        this.data = {}; // page data passed in to render the template
        this.dataUrl = params.dataUrl || ''; // url for this pages json data
        this.cache = (typeof(params.cache) !== 'undefined') ? params.cache : true; // data caching

        // initialize this page
        this.init();
    };

    /*
     * init
     * - initializes a page
     */
    this.Page.prototype.init = function(){
        // initialize this page
        var self = this;

        // get data and render the template
        if(self.dataUrl) {
            // get the data from the ajax url
            $.getJSON(self.dataUrl).always(function(data, status, xhr){
                self.data = data;
                self.render();
            });
        } else {
            // no data associated with this 
            // page render the contents
            self.render();
        }
    };

    /*
     * render
     * - renders a page
     */
    this.Page.prototype.render = function() {
        var self = this;

        // render this page
        if(self.template && self.cache) {
            // load the cached assets
            $('.js-ajax').html(self.template(self.data));
            // animate in
            self.in();
        } else {
            self.template = _.template(self.contents);

            // check children
            var loaded = 0;
            var $modules = $(self.contents).find('[data-module]');
            if($modules.length) {

                // loop through and load the 
                // data for this pages modules
                var loaded = 0;
                $modules.each(function(){
                    var modDataUrl = $(this).data('url');
                    var modName = $(this).data('module');

                    // check if we already  
                    // loaded this modules data
                    if(typeof(self.data[modName]) !== 'undefined' && self.cache) {
                        loaded++;

                        // all modules have loaded
                        // - load in the template
                        if(loaded == $modules.length) {
                            $('.js-ajax').html(self.template(self.data));

                            // animate in
                            self.in();
                        }
                    } else {
                        // get data from ajax url
                        self.data[modName] = [];
                        $.getJSON(modDataUrl).always(function(data,status,xhr){
                            self.data[modName] = data;
                            loaded++;

                            // all modules have loaded
                            // - load in the template
                            if(loaded == $modules.length) {
                                $('.js-ajax').html(self.template(self.data));

                                // animate in
                                 self.in();
                            }
                        });
                    }
                });
                
            } else {
                // then load this template
                $('.js-ajax').html(self.template(self.data));

                // animate in
                //$('.js-ajax').imagesLoaded().always(function(){
                    self.in();
                //});
            }

        }
    };

    /*
     * in
     * - page animate in
     */
    this.Page.prototype.in = function(){
        // animation items
        var $items = $('[data-anim]');
        var delay = 0;

        if($items.length == 0) {
            setTimeout(function(){
                $(window).trigger('animated-in');
            }, 200);
        } else {
            $items.each(function(){
                var anim = $(this).data('anim');
                delay += 0.05;

                switch(anim) {
                    case 'fade':
                        TweenLite.fromTo(this, 0.7, {y : -50, opacity: 0}, {delay : delay, y : 0, opacity: 1});
                        break;
                    case 'left':
                        TweenLite.fromTo(this, 0.7, {x : -1000, opacity: 0}, {delay : delay, x : 0, opacity: 1});
                        break;
                    case 'right':
                        TweenLite.fromTo(this, 0.7, {x : 1000, opacity: 0}, {delay : delay, x : 0, opacity: 1});
                        break;
                    default:
                        TweenLite.fromTo(this, 0.7, {y : -50, opacity: 0}, {delay : delay, y : 0, opacity: 1});
                        break;
                }
            });

            setTimeout(function(){
                 $(window).trigger('animated-in');
            }, (delay*1000) + 700);
        }
    };

    /*
     * out
     * - page animate out
     */
    this.Page.prototype.out = function(){
        // animation items
        var $items = $('[data-anim]');
        var delay = 0;

        if($items.length == 0) {
            setTimeout(function(){
                $(window).trigger('animated-out');
            }, 200);
        } else {
            $items.each(function(){
                var anim = $(this).data('anim');
                //delay += 0.1;

                switch(anim) {
                    case 'fade':
                        TweenLite.fromTo(this, 0.7, {y : 0, opacity: 1}, {delay : delay, y : -50, opacity: 0});
                        break;
                    case 'left':
                        TweenLite.fromTo(this, 0.7, {x : 0, opacity: 1}, {delay : delay, x : -1000, opacity: 0});
                        break;
                    case 'right':
                        TweenLite.fromTo(this, 0.7, {x : 0, opacity: 1}, {delay : delay, x : 1000, opacity: 0});
                        break;
                    default:
                        TweenLite.fromTo(this, 0.7, {y : 0, opacity: 1}, {delay : delay, y : -50, opacity: 0});
                        break;
                }
            });

            setTimeout(function(){
                 $(window).trigger('animated-out');
            }, (delay*1000) + 700);
        }
    };

};

/* 
 * exit
 *  - current page transition out
 */
PageManager.prototype.exit = function() { 
    // check if we have a current page
    if(this.currentPage) {
        this.pages[this.currentPage].out();
    } 
    // just trigger animated out
    else {
        $(window).trigger('animated-out');
    }
    
};

/* 
 * enter
 *  - page transition in
 *
 * @param {string} id
 * @param {string} contents
 * @param {string} dataUrl
 */
PageManager.prototype.enter = function(id, contents, dataUrl, cache) { 
    this.currentPage = id;

    // render the next page
    if(this.pages[id]) {
        this.pages[id].contents = contents;
        this.pages[id].dataUrl = dataUrl;
        this.pages[id].cache = cache;
        this.pages[id].render();
    } else {
        this.pages[id] = new this.Page({
            id : id,
            contents : contents,
            dataUrl : dataUrl,
            cache : cache
        });
    }

};

// Return PageManager module
module.exports = PageManager;

},{}],3:[function(require,module,exports){
/*
 * hbAccordion
 *  - A really simple accordion
 *
 * @author Mike Roth<mroth@highbridgecreative.com>
 * @version 1.0.0  
 */
(function($) {

    /*************************
     *
     *  Helper functions
     *
     ************************/
    function init(accordion) {
        // setup accordion
        $(accordion).css({
            visibility: 'hidden'
        });
        $(accordion).find(accordion.options.children).hide();
        $(accordion).css({
            visibility: 'visible'
        });
        // Get first child
        var first = $(accordion).find(accordion.options.children).eq(0);
        first.show().addClass('current');
    }

    function animate(accordion, index) {
        accordion.animating = true;
        var from = $(accordion).find(accordion.options.children + '.current');
        var to = $(accordion).find(accordion.options.children).eq(index);
        // Make sure we're actually going somewhere
        if (to.length && from.index(accordion.options.children) != to.index(accordion.options.children)) {
            if (typeof accordion.options.animating == "function") accordion.options.animating.call(accordion, index);
            $(to).slideDown();
            $(from).slideUp(function() {
                accordion.animating = false;
            });
            from.removeClass('current');
            to.addClass('current');
            // Let the callback know where we moved to
            if (typeof accordion.options.animated == "function") accordion.options.animated.call(accordion, index);
        } else {
            // close current
            $(to).slideToggle(function() {
                accordion.animating = false;
            });
            // Let the callback know we closed the current
            if (typeof accordion.options.animated == "function") accordion.options.animated.call(accordion, to.index(accordion.options.children));
        }
    }

    /*************************
     *
     *  Main accordion
     *
     ************************/
    var Accordion = function(opts) {
        var accordion = this;
        // Define default accordion.options
        accordion.options = {};
        accordion.options = $.extend(accordion.options, opts);
        init(accordion);
        // Allows showing to any image based on its index
        $(accordion).on('accordion-change', function(event, index) {
            // Make sure we're not animating
            if (!accordion.animating) {
                animate(accordion, index);
            }
        });
    };

    /*************************
     *
     *  Bind to jQuery
     *
     ************************/
    $.fn.hbAccordion = function(options) {
        for (var i = 0, l = this.length; i < l; i++) {
            Accordion.call(this[i], options);
        }
    };
    
})(jQuery);
},{}],4:[function(require,module,exports){
/*
 * hbGallery -- HighBridge Gallery
 *  - A really simple gallery!
 *
 * @author Rachel Shelton <rshelton@highbridgecreative.com>
 * @version 1.0.0
 */
(function($) {

    /*************************
     *
     *  Helper functions
     *
     ************************/
    function init(gallery) {
        // Get first child
        var first = $(gallery).find(gallery.options.children).eq(0);
        first.addClass('current');
        // Populate the parent with our first child
        $('body').find(gallery.options.parent).attr('src', first.data('src'));
    }

    function animate(gallery, index) {
        gallery.animating = true;
        var from = $(gallery).find(gallery.options.children + '.current');
        var to = $(gallery).find(gallery.options.children).eq(index);
        // Make sure we're actually going somewhere
        if (to.length && from.index(gallery.options.children) != to.index(gallery.options.children)) {
            if (typeof gallery.options.animating == "function") gallery.options.animating.call(gallery, index);
            $('body').find(gallery.options.parent).fadeOut(function() {
                $(this).attr('src', to.data('src'));
                $(this).on('load', function() {
                    $(this).fadeIn();
                    from.removeClass('current');
                    to.addClass('current');
                    gallery.animating = false;
                    // Let the callback know where we moved to
                    if (typeof gallery.options.animated == "function") gallery.options.animated.call(gallery, index);
                });
            });
        } else {
            gallery.animating = false;
            $('body').find(gallery.options.parent).fadeIn();
            // Let the callback know we didn't do anything
            if (typeof gallery.options.animated == "function") gallery.options.animated.call(gallery, from.index(gallery.options.children));
        }
    }

    /*************************
     *
     *  Main gallery code
     *
     ************************/
    var Gallery = function(input) {
        var gallery = this;
        // Define default gallery.options
        gallery.options = {
            display: 1,
            duration: 0.5
        };
        gallery.options = $.extend(gallery.options, input);
        init(gallery);
        // Convenience event for going to the next pane
        $(gallery).on('gallery-next', function() {
            var current = $(gallery).find(gallery.options.children + '.current');
            var index = current.index(gallery.options.children);
            var next = index + 1;
            if (next >= $(gallery).find(gallery.options.children).length) next = 0;
            $(gallery).trigger('gallery-show', next);
        });
        // Convenience event for going to the previous pane
        $(gallery).on('gallery-prev', function() {
            var current = $(gallery).find(gallery.options.children + '.current');
            var index = current.index(gallery.options.children);
            var prev = index - 1;
            if (prev < 0) prev = $(gallery).find(gallery.options.children).length - 1;
            $(gallery).trigger('gallery-show', prev);
        });
        // Allows showing to any image based on its index
        $(gallery).on('gallery-show', function(event, index) {
            // Make sure we're not animating
            if (!gallery.animating) {
                animate(gallery, index);
            }
        });
        // Hide the gallery parent
        $(gallery).on('gallery-hide', function() {
            $('body').find(gallery.options.parent).hide();
        });
    };

    /*************************
     *
     *  Bind to jQuery
     *
     ************************/
    $.fn.hbGallery = function(options) {
        for (var i = 0, l = this.length; i < l; i++) {
            Gallery.call(this[i], options);
        }
    };

})(jQuery);
},{}],5:[function(require,module,exports){
/*
 * history
 *  - Plugin for handling AJAX page loading via History.js
 *
 * @depends jQuery,History.js
 * @author Rachel Shelton<rshelton@highbridgecreative.com>
 * @version 1.0.0
 */
var history = {

    // Default plugin options
    defaults: {
        // Cancel ajax requests after 30 seconds
        timeout: 30000,
        // Default replacements
        // - An array of objects containing the source and destination selectors for replacements
        replacements: [{
            source: '#title',
            destination: 'title'
        }, {
            source: '.main',
            destination: '.main'
        }],
    },

    // Function to initialize the history plugin
    load: function(options) {
        history.options = $.extend({}, history.defaults, options);
        $.ajaxSetup({
            timeout: history.options.timeout
        });
        
        // Bind to all state changes
        $(window).on('statechange', function() {
            var state = History.getState();
            // Cancel any unfinished AJAX requests 
            if (history.request) {
                history.request.abort();
            }
            $(window).trigger('history-loading');
            history.request = $.get(state.url, {
                ajax: true
            }, function(response) {
                history.response = response;
                // Trigger history-loaded and pass the response data in case it needs to be handled elsewhere
                $(window).trigger('history-loaded', response);
            })
            // Automatically refresh the page when an AJAX requests time out
            .fail(function(xhr) {
                if (xhr.statusText != 'abort') {
                    window.location.reload();
                }
            });
        });

        // Event for adding pages to the browser history
        $(window).on('history-push', function(event, url) {
            History.pushState(null, null, url);
        });

        // Event which triggers this plugin to replace page content with response data
        $(window).on('history-replace', function(event, data) {
            // If override data is passed, replace the saved ajax response
            if (data) {
                history.response = data;
            }
            history.replace();
        });

        // Trigger history ready upon initialization
        $(window).trigger('history-ready');
    },

    // Function to remove this plugin
    unload: function(options) {
        delete history.options;
        delete history.response;
        $(window).off('statechange history-push history-replace');
    },

    // Function to replace elements on the page with loaded data
    replace: function() {
        // Only perform a replacement if we have a pending response
        if (history.response) {
            // Wrap the entire response in a div, so we can always use .find()
            var response = $("<div>" + history.response + "</div>");
            for (var i = 0, l = history.options.replacements.length; i < l; i++) {
                var replacement = history.options.replacements[i];
                var content = response.find(replacement.source).html();
                if (content) {
                    // Perform replacement if content exists
                    $(replacement.destination).html(content);
                } else {
                    // Otherwise hide the element
                    $(replacement.destination).hide();
                }
            }
            // Clear saved response after performing replacement
            delete history.response;
            // Trigger history ready after making replacements so events can be rebound
            $(window).trigger('history-ready');
        }
    }
};

module.exports = {
    load: history.load,
    unload: history.unload
};

},{}],6:[function(require,module,exports){
/*
 * hbSlider 
 *  - simple highbridge slider
 *
 * @author Rachel Shelton<rshelton@highbridgecreative.com>
 * @version 1.0.0
 */
(function($) {

    /*************************
     *
     *  Helper functions
     *
     ************************/
    // Initialize slider
    function init(slider) {
        // Ensure a pane is set as current on load
        if ($(slider).find('.slide-pane.current').length == 0) $(slider).find('.slide-pane').eq(0).addClass('current active');
        var offset = $(slider).find('.slide-pane').eq(0).outerWidth(true);
        // Determine visible panes
        for (var i = 1, l = slider.options.display; i < l; i++) {
            var pane = $(slider).find('.slide-pane').eq(i);
            TweenLite.set(pane[0], {
                x: offset + 'px'
            });
            offset += pane.outerWidth(true);
            pane.addClass('active');
        }
    }

    function calculate_duration(slider, distance, duration) {
        return distance * duration / $(slider).width();
    }

    function animate(slide) {
        var slider = this;
        slider.animating = true;
        // Where are we now?
        var from = $(slider).find('.slide-pane.current');
        // Where are we moving to?
        var to = $(slider).find('.slide-pane').eq(slide.index);
        // Add a class on the slide we're moving to
        to.addClass('sliding-to');
        // Find the difference between the index of current pane and the index of where we're sliding to
        var difference;
        // If the index we're moving to is less than the current index and we're moving left
        if (to.index() < from.index() && slide.direction == 'left') difference = (to.index() + $(slider).find('.slide-pane').length) - from.index();
        // If the index we're moving to is greater than the current index and we're moving right
        else if (to.index() > from.index() && slide.direction == 'right') difference = (from.index() + $(slider).find('.slide-pane').length) - to.index();
        // Else...
        else difference = Math.abs(from.index() - to.index());
        var queue = {};
        var offset_to = (slide.direction == 'right') ? $(slider).width() : 0;
        if (slide.direction == 'right') {
            if (difference < slider.options.display) {
                for (var i = from.index() + slider.options.display, l = from.index(); i > l; i--) {
                    var index = i - 1;
                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                    var pane = $(slider).find('.slide-pane').eq(index);
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'inactive'
                    };
                    offset_to += pane.outerWidth(true);
                }
            } else {
                // Start at current index
                for (var i = from.index(), l = from.index() + slider.options.display; i < l; i++) {
                    var index = i;
                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                    var pane = $(slider).find('.slide-pane').eq(index);
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'inactive'
                    };
                    offset_to += pane.outerWidth(true);
                }
            }
        } else {
            if (difference < slider.options.display) {
                for (var i = from.index(), l = from.index() + slider.options.display; i < l; i++) {
                    var index = i;
                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                    var pane = $(slider).find('.slide-pane').eq(index);
                    offset_to -= pane.outerWidth(true);
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'inactive'
                    };
                }
            } else {
                for (var i = from.index() + slider.options.display, l = from.index(); i > l; i--) {
                    var index = i - 1;
                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                    var pane = $(slider).find('.slide-pane').eq(index);
                    offset_to -= pane.outerWidth(true);
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'inactive'
                    };
                }
            }
        }

        var offset_from = (slide.direction == 'right') ? 0 : $(slider).width();
        var offset_to = (slide.direction == 'right') ? $(slider).width() : 0;
        if (slide.direction == 'right') {
            for (var i = slide.index + slider.options.display, l = slide.index; i > l; i--) {
                var index = i - 1;
                if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                var pane = $(slider).find('.slide-pane').eq(index);
                if (!pane.hasClass('active')) {
                    pane.addClass('active');
                    offset_from -= pane.outerWidth(true);
                    offset_to -= pane.outerWidth(true);
                    queue[index] = {
                        from: offset_from,
                        to: offset_to,
                        status: 'active'
                    };
                } else {
                    offset_to -= pane.outerWidth(true);
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'active'
                    };
                }
            }
        } else {
            // Start at slide.index, until index + slider.options.display
            for (var i = slide.index, l = slide.index + slider.options.display; i < l; i++) {
                var index = i;
                if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;
                var pane = $(slider).find('.slide-pane').eq(index);
                if (!pane.hasClass('active')) {
                    pane.addClass('active');
                    queue[index] = {
                        from: offset_from,
                        to: offset_to,
                        status: 'active'
                    };
                    offset_from += pane.outerWidth(true);
                    offset_to += pane.outerWidth(true);
                } else {
                    queue[index] = {
                        from: pane.position().left,
                        to: offset_to,
                        status: 'active'
                    };
                    offset_to += pane.outerWidth(true);
                }
            }
        }

        // Trigger resize if this is a dynamic height slider
        if (slider.options.dynamicHeight) {
            $(window).trigger('resize', {
                animation: true
            });
        }

        for (var i = 0, keys = Object.keys(queue), l = keys.length; i < l; ++i) {
            var index = keys[i];
            var data = queue[keys[i]];
            var pane = $(slider).find('.slide-pane').eq(index);
            var duration = calculate_duration(slider, Math.abs(data.from - data.to), slider.options.duration);
            pane.addClass('animating');
            TweenLite.fromTo(pane[0], duration, {
                x: data.from
            }, {
                x: data.to,
                onComplete: animated,
                onCompleteParams: [slider, slide, data.status]
            });
        }
    }

    function animated(slider, slide, status) {
        var pane = $(this.target);
        $(slider).find('.slide-pane.current').removeClass('current');
        $(slider).find('.slide-pane').eq(slide.index).addClass('current').removeClass('sliding-to');
        if (status == 'active') pane.addClass('active');
        else pane.removeClass('active');
        pane.removeClass('animating');
        if ($(slider).find('.animating').length == 0) {
            slider.animating = false;
            if (typeof slider.options.slideEnd == "function") slider.options.slideEnd.call(slider);
        }
    }

    /*************************
     *
     *  Main slider code
     *
     ************************/
    var Slider = function(input) {
        var slider = this;
        // Define default slider.options
        slider.options = {
            display: 1,
            duration: 0.5,
            dynamicHeight: false
        };
        slider.options = $.extend(slider.options, input);
        init(slider);
        // When resize is triggered
        $(window).on('resize', function(event, params) {
            // Clear any styles if this slider has become disabled
            if ($(slider).hasClass('disabled')) {
                $(slider).removeAttr('style');
            }
            // If the slider isn't disabled
            if (!$(slider).hasClass('disabled')) {
                // Animate slider to use the height of the slide we're sliding to
                if (!slider.options.dynamicHeight) {
                    // Clear any styles on the slider
                    $(slider).removeAttr('style');
                    // Loop through all panes and set the container height to the maximum pane height
                    $(slider).find('.slide-pane').each(function() {
                        $(this).css('height', 'auto');
                        var parent = $(slider);
                        if ($(this).outerHeight(true) > parent.height()) {
                            parent.height($(this).outerHeight(true));
                        }
                        $(this).css('height', '100%');
                    });
                }
                // Only trigger slide resize if this event wasn't triggered by animation
                if (params === undefined || !params.animation) {
                    $(slider).trigger('slide-resize');
                }
            }
        });
        // Trigger resize now to try to position everything
        $(window).trigger('resize');
        // Trigger resize again once the window is fully loaded
        $(window).load(function() {
            $(window).trigger('resize');
        });
        // Convenience event for going to the next pane
        $(slider).on('slide-next', function() {
            var current = $(slider).find('.slide-pane.current');
            var index = current.index();
            var next = index + 1;
            if (next >= $(slider).find('.slide-pane').length) next = 0;
            $(slider).trigger('slide-to', next);
        });
        // Convenience event for going to the previous pane
        $(slider).on('slide-prev', function() {
            var current = $(slider).find('.slide-pane.current');
            var index = current.index();
            var prev = index - 1;
            if (prev < 0) prev = $(slider).find('.slide-pane').length - 1;
            $(slider).trigger('slide-to', prev);
        });
        $(slider).on('slide-resize', function() {
            // Find the current pane
            var current = $(slider).find('.slide-pane.current').index();
            // Trigger slide to current, fixing any potential difference in positioning
            $(slider).trigger('slide-to', current);
        });
        // Allows sliding to any pane based on its index
        $(slider).on('slide-to', function(event, input) {
            var slide = {
                index: 0,
                direction: 'left'
            };
            // If our request is an object
            if (typeof input == "object") $.extend(slide, input);
            // Else if the request is simply a number
            if (input == parseInt(input)) slide.index = input;
            var from = $(slider).find('.slide-pane.current');
            var to = $(slider).find('.slide-pane').eq(slide.index);
            var last = $(slider).find('.slide-pane').length - 1;
            // If the pane we're moving to comes before the current, move right
            if (from.index() > to.index()) slide.direction = 'right';
            // If the pane we're moving to comes after the current, move left
            if (from.index() < to.index()) slide.direction = 'left';
            // If we're moving to the last pane from the first
            if (from.index() == 0 && to.index() == last) slide.direction = 'right';
            // If we're moving to the first pane from the last
            if (from.index() == last && to.index() == 0) slide.direction = 'left';
            if (!slider.animating && !$(slider).hasClass('disabled')) {
                animate.call(slider, slide);
                if (typeof slider.options != "undefined" && typeof slider.options.slideStart == "function") slider.options.slideStart.call(slider);
            }
        });
    };

    /*************************
     *
     *  Bind to jQuery
     *
     ************************/
    $.fn.hbSlider = function(options) {
        for (var i = 0, l = this.length; i < l; i++) {
            Slider.call(this[i], options);
        }
    };
    
})(jQuery);
},{}],7:[function(require,module,exports){

// page status
var status;

// setup our Page Manager
var PageManager = require('../app/page-manager');
var pm = new PageManager();

// history-loading
//  - Remove all event listeners  
//    and begin exit transition
$(window).on('history-loading', function(event) {
    
    // unbind
    status = 'loading';
    $('body').off();
    $(window).off('resize');

    // animate out
    $('.js-loading').fadeIn();
    pm.exit();
});

// animated-out
//  - page exit transition finished
$(window).on('animated-out', function(event) {
    // Check if page is already loaded
    if(status == 'loaded') {
        // Trigger page replacement
        $(window).trigger('history-replace');
    } else {
        status = 'animated';
    }
});

// history-loaded
//  - history ajax request finished
$(window).on('history-loaded', function(event, response) {
    $('.js-ajax').css('min-height', $(window).height());
    
    // Check if animations are finished
    if(status == 'animated') {
        // Trigger page replacement
        
        $(window).trigger('history-replace');
    } else {
        status = 'loaded';
    }
});

// history-ready
//  - history-replace finished and page is ready
$(window).on('history-ready', function(event) {
    $('.js-ajax').css('min-height', $(window).height());

    // find template
    var $tmpl = $('.js-ajax').find('.js-template');
        
    // load template
    if($tmpl.length) {  

        var title = $tmpl.data('title'),
            classes = $tmpl.data('body-class'),
            description = $tmpl.data('description');
            pageId = $tmpl.data('page'),
            dataUrl = $tmpl.data('url'),
            
            // NOTE: js-no-cache has to be top level in the _.js-template for ($.filter)
            cache = $($tmpl.html()).filter('.js-no-cache').length ? false : true; 

        $('title').html(title);
        $('body').attr('class', classes);
        $('meta[name="description"]').attr('content', description);

        pm.enter(pageId, $tmpl.html(), dataUrl, cache);
    }
});

// animated-in
//  - animate in completed, page fully ready
//    bind events and init plugins, etc...
$(window).on('animated-in', function(event){
    // --- bind events dependent on DOM --- //

    // bind ajax button clicks
    $('body').on('click', 'a', function(event) {
        if ($(this).data('ajax') !== undefined) {
            event.preventDefault();
            var url = $(this).attr('href');
            $(window).trigger('history-push', url);
        }
    });

    // trigger ajax ready for 
    // all includes to bind to
    $('.js-loading').fadeOut();
    $(window).trigger('ajax-ready');
    
});

},{"../app/page-manager":2}],8:[function(require,module,exports){

// includes
require('../plugins/slider');
require('../plugins/accordion');
require('../plugins/gallery');

$(window).on('ajax-ready', function(event) {

    // init plugins

    // general js
    
});
},{"../plugins/accordion":3,"../plugins/gallery":4,"../plugins/slider":6}]},{},[1])


//# sourceMappingURL=main.min.js.map