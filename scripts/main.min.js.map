{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","scripts/main.js","scripts/app/page-manager.js","scripts/plugins/accordion.js","scripts/plugins/gallery.js","scripts/plugins/history.js","scripts/plugins/slider.js","scripts/ui/ajax.js","scripts/ui/general.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptjnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.min.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// --- main --- //\n\n// avoid doing anything on older browsers\nif(!document.addEventListener) return false;\n\n// load History\nvar history = require(\"./plugins/history\");\n\n// load everything else\nrequire(\"./ui/ajax\");\nrequire(\"./ui/general\");\n\n// init\n$(document).ready(function() {\n    \n    // init history js\n    history.load({\n        replacements: [\n            // TODO title, description, en/fr switch\n            {source : '.js-ajax', destination : '.js-ajax'}\n        ]\n    });\n\n});","\n/** \n * PageManager\n *  - manages creating new pages via underscore templating\n *    with template/asset caching and page transition animations\n *\n * @author Michael Roth <mroth@highbridgecreative.com>\n * @version 1.0.0\n */\nvar PageManager = function(params) {\n\n    // instance vars\n    this.pages = {};\n    this.currentPage = '';\n\n    /** \n     * Page\n     *  - a page object used \n     *    to create a new page\n     */\n    this.Page = function(params) {\n\n        this.id = params.id; // page id\n        this.contents = params.contents; // page raw html contents\n        this.template = null; // the page _.template\n        this.data = {}; // page data passed in to render the template\n        this.dataUrl = params.dataUrl || ''; // url for this pages json data\n        this.cache = (typeof(params.cache) !== 'undefined') ? params.cache : true; // data caching\n\n        // initialize this page\n        this.init();\n    };\n\n    /*\n     * init\n     * - initializes a page\n     */\n    this.Page.prototype.init = function(){\n        // initialize this page\n        var self = this;\n\n        // get data and render the template\n        if(self.dataUrl) {\n            // get the data from the ajax url\n            $.getJSON(self.dataUrl).always(function(data, status, xhr){\n                self.data = data;\n                self.render();\n            });\n        } else {\n            // no data associated with this \n            // page render the contents\n            self.render();\n        }\n    };\n\n    /*\n     * render\n     * - renders a page\n     */\n    this.Page.prototype.render = function() {\n        var self = this;\n\n        // render this page\n        if(self.template && self.cache) {\n            // load the cached assets\n            $('.js-ajax').html(self.template(self.data));\n            // animate in\n            self.in();\n        } else {\n            self.template = _.template(self.contents);\n\n            // check children\n            var loaded = 0;\n            var $modules = $(self.contents).find('[data-module]');\n            if($modules.length) {\n\n                // loop through and load the \n                // data for this pages modules\n                var loaded = 0;\n                $modules.each(function(){\n                    var modDataUrl = $(this).data('url');\n                    var modName = $(this).data('module');\n\n                    // check if we already  \n                    // loaded this modules data\n                    if(typeof(self.data[modName]) !== 'undefined' && self.cache) {\n                        loaded++;\n\n                        // all modules have loaded\n                        // - load in the template\n                        if(loaded == $modules.length) {\n                            $('.js-ajax').html(self.template(self.data));\n\n                            // animate in\n                            self.in();\n                        }\n                    } else {\n                        // get data from ajax url\n                        self.data[modName] = [];\n                        $.getJSON(modDataUrl).always(function(data,status,xhr){\n                            self.data[modName] = data;\n                            loaded++;\n\n                            // all modules have loaded\n                            // - load in the template\n                            if(loaded == $modules.length) {\n                                $('.js-ajax').html(self.template(self.data));\n\n                                // animate in\n                                 self.in();\n                            }\n                        });\n                    }\n                });\n                \n            } else {\n                // then load this template\n                $('.js-ajax').html(self.template(self.data));\n\n                // animate in\n                //$('.js-ajax').imagesLoaded().always(function(){\n                    self.in();\n                //});\n            }\n\n        }\n    };\n\n    /*\n     * in\n     * - page animate in\n     */\n    this.Page.prototype.in = function(){\n        // animation items\n        var $items = $('[data-anim]');\n        var delay = 0;\n\n        if($items.length == 0) {\n            setTimeout(function(){\n                $(window).trigger('animated-in');\n            }, 200);\n        } else {\n            $items.each(function(){\n                var anim = $(this).data('anim');\n                delay += 0.05;\n\n                switch(anim) {\n                    case 'fade':\n                        TweenLite.fromTo(this, 0.7, {y : -50, opacity: 0}, {delay : delay, y : 0, opacity: 1});\n                        break;\n                    case 'left':\n                        TweenLite.fromTo(this, 0.7, {x : -1000, opacity: 0}, {delay : delay, x : 0, opacity: 1});\n                        break;\n                    case 'right':\n                        TweenLite.fromTo(this, 0.7, {x : 1000, opacity: 0}, {delay : delay, x : 0, opacity: 1});\n                        break;\n                    default:\n                        TweenLite.fromTo(this, 0.7, {y : -50, opacity: 0}, {delay : delay, y : 0, opacity: 1});\n                        break;\n                }\n            });\n\n            setTimeout(function(){\n                 $(window).trigger('animated-in');\n            }, (delay*1000) + 700);\n        }\n    };\n\n    /*\n     * out\n     * - page animate out\n     */\n    this.Page.prototype.out = function(){\n        // animation items\n        var $items = $('[data-anim]');\n        var delay = 0;\n\n        if($items.length == 0) {\n            setTimeout(function(){\n                $(window).trigger('animated-out');\n            }, 200);\n        } else {\n            $items.each(function(){\n                var anim = $(this).data('anim');\n                //delay += 0.1;\n\n                switch(anim) {\n                    case 'fade':\n                        TweenLite.fromTo(this, 0.7, {y : 0, opacity: 1}, {delay : delay, y : -50, opacity: 0});\n                        break;\n                    case 'left':\n                        TweenLite.fromTo(this, 0.7, {x : 0, opacity: 1}, {delay : delay, x : -1000, opacity: 0});\n                        break;\n                    case 'right':\n                        TweenLite.fromTo(this, 0.7, {x : 0, opacity: 1}, {delay : delay, x : 1000, opacity: 0});\n                        break;\n                    default:\n                        TweenLite.fromTo(this, 0.7, {y : 0, opacity: 1}, {delay : delay, y : -50, opacity: 0});\n                        break;\n                }\n            });\n\n            setTimeout(function(){\n                 $(window).trigger('animated-out');\n            }, (delay*1000) + 700);\n        }\n    };\n\n};\n\n/* \n * exit\n *  - current page transition out\n */\nPageManager.prototype.exit = function() { \n    // check if we have a current page\n    if(this.currentPage) {\n        this.pages[this.currentPage].out();\n    } \n    // just trigger animated out\n    else {\n        $(window).trigger('animated-out');\n    }\n    \n};\n\n/* \n * enter\n *  - page transition in\n *\n * @param {string} id\n * @param {string} contents\n * @param {string} dataUrl\n */\nPageManager.prototype.enter = function(id, contents, dataUrl, cache) { \n    this.currentPage = id;\n\n    // render the next page\n    if(this.pages[id]) {\n        this.pages[id].contents = contents;\n        this.pages[id].dataUrl = dataUrl;\n        this.pages[id].cache = cache;\n        this.pages[id].render();\n    } else {\n        this.pages[id] = new this.Page({\n            id : id,\n            contents : contents,\n            dataUrl : dataUrl,\n            cache : cache\n        });\n    }\n\n};\n\n// Return PageManager module\nmodule.exports = PageManager;\n","/*\n * hbAccordion\n *  - A really simple accordion\n *\n * @author Mike Roth<mroth@highbridgecreative.com>\n * @version 1.0.0  \n */\n(function($) {\n\n    /*************************\n     *\n     *  Helper functions\n     *\n     ************************/\n    function init(accordion) {\n        // setup accordion\n        $(accordion).css({\n            visibility: 'hidden'\n        });\n        $(accordion).find(accordion.options.children).hide();\n        $(accordion).css({\n            visibility: 'visible'\n        });\n        // Get first child\n        var first = $(accordion).find(accordion.options.children).eq(0);\n        first.show().addClass('current');\n    }\n\n    function animate(accordion, index) {\n        accordion.animating = true;\n        var from = $(accordion).find(accordion.options.children + '.current');\n        var to = $(accordion).find(accordion.options.children).eq(index);\n        // Make sure we're actually going somewhere\n        if (to.length && from.index(accordion.options.children) != to.index(accordion.options.children)) {\n            if (typeof accordion.options.animating == \"function\") accordion.options.animating.call(accordion, index);\n            $(to).slideDown();\n            $(from).slideUp(function() {\n                accordion.animating = false;\n            });\n            from.removeClass('current');\n            to.addClass('current');\n            // Let the callback know where we moved to\n            if (typeof accordion.options.animated == \"function\") accordion.options.animated.call(accordion, index);\n        } else {\n            // close current\n            $(to).slideToggle(function() {\n                accordion.animating = false;\n            });\n            // Let the callback know we closed the current\n            if (typeof accordion.options.animated == \"function\") accordion.options.animated.call(accordion, to.index(accordion.options.children));\n        }\n    }\n\n    /*************************\n     *\n     *  Main accordion\n     *\n     ************************/\n    var Accordion = function(opts) {\n        var accordion = this;\n        // Define default accordion.options\n        accordion.options = {};\n        accordion.options = $.extend(accordion.options, opts);\n        init(accordion);\n        // Allows showing to any image based on its index\n        $(accordion).on('accordion-change', function(event, index) {\n            // Make sure we're not animating\n            if (!accordion.animating) {\n                animate(accordion, index);\n            }\n        });\n    };\n\n    /*************************\n     *\n     *  Bind to jQuery\n     *\n     ************************/\n    $.fn.hbAccordion = function(options) {\n        for (var i = 0, l = this.length; i < l; i++) {\n            Accordion.call(this[i], options);\n        }\n    };\n    \n})(jQuery);","/*\n * hbGallery -- HighBridge Gallery\n *  - A really simple gallery!\n *\n * @author Rachel Shelton <rshelton@highbridgecreative.com>\n * @version 1.0.0\n */\n(function($) {\n\n    /*************************\n     *\n     *  Helper functions\n     *\n     ************************/\n    function init(gallery) {\n        // Get first child\n        var first = $(gallery).find(gallery.options.children).eq(0);\n        first.addClass('current');\n        // Populate the parent with our first child\n        $('body').find(gallery.options.parent).attr('src', first.data('src'));\n    }\n\n    function animate(gallery, index) {\n        gallery.animating = true;\n        var from = $(gallery).find(gallery.options.children + '.current');\n        var to = $(gallery).find(gallery.options.children).eq(index);\n        // Make sure we're actually going somewhere\n        if (to.length && from.index(gallery.options.children) != to.index(gallery.options.children)) {\n            if (typeof gallery.options.animating == \"function\") gallery.options.animating.call(gallery, index);\n            $('body').find(gallery.options.parent).fadeOut(function() {\n                $(this).attr('src', to.data('src'));\n                $(this).on('load', function() {\n                    $(this).fadeIn();\n                    from.removeClass('current');\n                    to.addClass('current');\n                    gallery.animating = false;\n                    // Let the callback know where we moved to\n                    if (typeof gallery.options.animated == \"function\") gallery.options.animated.call(gallery, index);\n                });\n            });\n        } else {\n            gallery.animating = false;\n            $('body').find(gallery.options.parent).fadeIn();\n            // Let the callback know we didn't do anything\n            if (typeof gallery.options.animated == \"function\") gallery.options.animated.call(gallery, from.index(gallery.options.children));\n        }\n    }\n\n    /*************************\n     *\n     *  Main gallery code\n     *\n     ************************/\n    var Gallery = function(input) {\n        var gallery = this;\n        // Define default gallery.options\n        gallery.options = {\n            display: 1,\n            duration: 0.5\n        };\n        gallery.options = $.extend(gallery.options, input);\n        init(gallery);\n        // Convenience event for going to the next pane\n        $(gallery).on('gallery-next', function() {\n            var current = $(gallery).find(gallery.options.children + '.current');\n            var index = current.index(gallery.options.children);\n            var next = index + 1;\n            if (next >= $(gallery).find(gallery.options.children).length) next = 0;\n            $(gallery).trigger('gallery-show', next);\n        });\n        // Convenience event for going to the previous pane\n        $(gallery).on('gallery-prev', function() {\n            var current = $(gallery).find(gallery.options.children + '.current');\n            var index = current.index(gallery.options.children);\n            var prev = index - 1;\n            if (prev < 0) prev = $(gallery).find(gallery.options.children).length - 1;\n            $(gallery).trigger('gallery-show', prev);\n        });\n        // Allows showing to any image based on its index\n        $(gallery).on('gallery-show', function(event, index) {\n            // Make sure we're not animating\n            if (!gallery.animating) {\n                animate(gallery, index);\n            }\n        });\n        // Hide the gallery parent\n        $(gallery).on('gallery-hide', function() {\n            $('body').find(gallery.options.parent).hide();\n        });\n    };\n\n    /*************************\n     *\n     *  Bind to jQuery\n     *\n     ************************/\n    $.fn.hbGallery = function(options) {\n        for (var i = 0, l = this.length; i < l; i++) {\n            Gallery.call(this[i], options);\n        }\n    };\n\n})(jQuery);","/*\n * history\n *  - Plugin for handling AJAX page loading via History.js\n *\n * @depends jQuery,History.js\n * @author Rachel Shelton<rshelton@highbridgecreative.com>\n * @version 1.0.0\n */\nvar history = {\n\n    // Default plugin options\n    defaults: {\n        // Cancel ajax requests after 30 seconds\n        timeout: 30000,\n        // Default replacements\n        // - An array of objects containing the source and destination selectors for replacements\n        replacements: [{\n            source: '#title',\n            destination: 'title'\n        }, {\n            source: '.main',\n            destination: '.main'\n        }],\n    },\n\n    // Function to initialize the history plugin\n    load: function(options) {\n        history.options = $.extend({}, history.defaults, options);\n        $.ajaxSetup({\n            timeout: history.options.timeout\n        });\n        \n        // Bind to all state changes\n        $(window).on('statechange', function() {\n            var state = History.getState();\n            // Cancel any unfinished AJAX requests \n            if (history.request) {\n                history.request.abort();\n            }\n            $(window).trigger('history-loading');\n            history.request = $.get(state.url, {\n                ajax: true\n            }, function(response) {\n                history.response = response;\n                // Trigger history-loaded and pass the response data in case it needs to be handled elsewhere\n                $(window).trigger('history-loaded', response);\n            })\n            // Automatically refresh the page when an AJAX requests time out\n            .fail(function(xhr) {\n                if (xhr.statusText != 'abort') {\n                    window.location.reload();\n                }\n            });\n        });\n\n        // Event for adding pages to the browser history\n        $(window).on('history-push', function(event, url) {\n            History.pushState(null, null, url);\n        });\n\n        // Event which triggers this plugin to replace page content with response data\n        $(window).on('history-replace', function(event, data) {\n            // If override data is passed, replace the saved ajax response\n            if (data) {\n                history.response = data;\n            }\n            history.replace();\n        });\n\n        // Trigger history ready upon initialization\n        $(window).trigger('history-ready');\n    },\n\n    // Function to remove this plugin\n    unload: function(options) {\n        delete history.options;\n        delete history.response;\n        $(window).off('statechange history-push history-replace');\n    },\n\n    // Function to replace elements on the page with loaded data\n    replace: function() {\n        // Only perform a replacement if we have a pending response\n        if (history.response) {\n            // Wrap the entire response in a div, so we can always use .find()\n            var response = $(\"<div>\" + history.response + \"</div>\");\n            for (var i = 0, l = history.options.replacements.length; i < l; i++) {\n                var replacement = history.options.replacements[i];\n                var content = response.find(replacement.source).html();\n                if (content) {\n                    // Perform replacement if content exists\n                    $(replacement.destination).html(content);\n                } else {\n                    // Otherwise hide the element\n                    $(replacement.destination).hide();\n                }\n            }\n            // Clear saved response after performing replacement\n            delete history.response;\n            // Trigger history ready after making replacements so events can be rebound\n            $(window).trigger('history-ready');\n        }\n    }\n};\n\nmodule.exports = {\n    load: history.load,\n    unload: history.unload\n};\n","/*\n * hbSlider \n *  - simple highbridge slider\n *\n * @author Rachel Shelton<rshelton@highbridgecreative.com>\n * @version 1.0.0\n */\n(function($) {\n\n    /*************************\n     *\n     *  Helper functions\n     *\n     ************************/\n    // Initialize slider\n    function init(slider) {\n        // Ensure a pane is set as current on load\n        if ($(slider).find('.slide-pane.current').length == 0) $(slider).find('.slide-pane').eq(0).addClass('current active');\n        var offset = $(slider).find('.slide-pane').eq(0).outerWidth(true);\n        // Determine visible panes\n        for (var i = 1, l = slider.options.display; i < l; i++) {\n            var pane = $(slider).find('.slide-pane').eq(i);\n            TweenLite.set(pane[0], {\n                x: offset + 'px'\n            });\n            offset += pane.outerWidth(true);\n            pane.addClass('active');\n        }\n    }\n\n    function calculate_duration(slider, distance, duration) {\n        return distance * duration / $(slider).width();\n    }\n\n    function animate(slide) {\n        var slider = this;\n        slider.animating = true;\n        // Where are we now?\n        var from = $(slider).find('.slide-pane.current');\n        // Where are we moving to?\n        var to = $(slider).find('.slide-pane').eq(slide.index);\n        // Add a class on the slide we're moving to\n        to.addClass('sliding-to');\n        // Find the difference between the index of current pane and the index of where we're sliding to\n        var difference;\n        // If the index we're moving to is less than the current index and we're moving left\n        if (to.index() < from.index() && slide.direction == 'left') difference = (to.index() + $(slider).find('.slide-pane').length) - from.index();\n        // If the index we're moving to is greater than the current index and we're moving right\n        else if (to.index() > from.index() && slide.direction == 'right') difference = (from.index() + $(slider).find('.slide-pane').length) - to.index();\n        // Else...\n        else difference = Math.abs(from.index() - to.index());\n        var queue = {};\n        var offset_to = (slide.direction == 'right') ? $(slider).width() : 0;\n        if (slide.direction == 'right') {\n            if (difference < slider.options.display) {\n                for (var i = from.index() + slider.options.display, l = from.index(); i > l; i--) {\n                    var index = i - 1;\n                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                    var pane = $(slider).find('.slide-pane').eq(index);\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'inactive'\n                    };\n                    offset_to += pane.outerWidth(true);\n                }\n            } else {\n                // Start at current index\n                for (var i = from.index(), l = from.index() + slider.options.display; i < l; i++) {\n                    var index = i;\n                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                    var pane = $(slider).find('.slide-pane').eq(index);\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'inactive'\n                    };\n                    offset_to += pane.outerWidth(true);\n                }\n            }\n        } else {\n            if (difference < slider.options.display) {\n                for (var i = from.index(), l = from.index() + slider.options.display; i < l; i++) {\n                    var index = i;\n                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                    var pane = $(slider).find('.slide-pane').eq(index);\n                    offset_to -= pane.outerWidth(true);\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'inactive'\n                    };\n                }\n            } else {\n                for (var i = from.index() + slider.options.display, l = from.index(); i > l; i--) {\n                    var index = i - 1;\n                    if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                    var pane = $(slider).find('.slide-pane').eq(index);\n                    offset_to -= pane.outerWidth(true);\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'inactive'\n                    };\n                }\n            }\n        }\n\n        var offset_from = (slide.direction == 'right') ? 0 : $(slider).width();\n        var offset_to = (slide.direction == 'right') ? $(slider).width() : 0;\n        if (slide.direction == 'right') {\n            for (var i = slide.index + slider.options.display, l = slide.index; i > l; i--) {\n                var index = i - 1;\n                if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                var pane = $(slider).find('.slide-pane').eq(index);\n                if (!pane.hasClass('active')) {\n                    pane.addClass('active');\n                    offset_from -= pane.outerWidth(true);\n                    offset_to -= pane.outerWidth(true);\n                    queue[index] = {\n                        from: offset_from,\n                        to: offset_to,\n                        status: 'active'\n                    };\n                } else {\n                    offset_to -= pane.outerWidth(true);\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'active'\n                    };\n                }\n            }\n        } else {\n            // Start at slide.index, until index + slider.options.display\n            for (var i = slide.index, l = slide.index + slider.options.display; i < l; i++) {\n                var index = i;\n                if (index >= $(slider).find('.slide-pane').length) index -= $(slider).find('.slide-pane').length;\n                var pane = $(slider).find('.slide-pane').eq(index);\n                if (!pane.hasClass('active')) {\n                    pane.addClass('active');\n                    queue[index] = {\n                        from: offset_from,\n                        to: offset_to,\n                        status: 'active'\n                    };\n                    offset_from += pane.outerWidth(true);\n                    offset_to += pane.outerWidth(true);\n                } else {\n                    queue[index] = {\n                        from: pane.position().left,\n                        to: offset_to,\n                        status: 'active'\n                    };\n                    offset_to += pane.outerWidth(true);\n                }\n            }\n        }\n\n        // Trigger resize if this is a dynamic height slider\n        if (slider.options.dynamicHeight) {\n            $(window).trigger('resize', {\n                animation: true\n            });\n        }\n\n        for (var i = 0, keys = Object.keys(queue), l = keys.length; i < l; ++i) {\n            var index = keys[i];\n            var data = queue[keys[i]];\n            var pane = $(slider).find('.slide-pane').eq(index);\n            var duration = calculate_duration(slider, Math.abs(data.from - data.to), slider.options.duration);\n            pane.addClass('animating');\n            TweenLite.fromTo(pane[0], duration, {\n                x: data.from\n            }, {\n                x: data.to,\n                onComplete: animated,\n                onCompleteParams: [slider, slide, data.status]\n            });\n        }\n    }\n\n    function animated(slider, slide, status) {\n        var pane = $(this.target);\n        $(slider).find('.slide-pane.current').removeClass('current');\n        $(slider).find('.slide-pane').eq(slide.index).addClass('current').removeClass('sliding-to');\n        if (status == 'active') pane.addClass('active');\n        else pane.removeClass('active');\n        pane.removeClass('animating');\n        if ($(slider).find('.animating').length == 0) {\n            slider.animating = false;\n            if (typeof slider.options.slideEnd == \"function\") slider.options.slideEnd.call(slider);\n        }\n    }\n\n    /*************************\n     *\n     *  Main slider code\n     *\n     ************************/\n    var Slider = function(input) {\n        var slider = this;\n        // Define default slider.options\n        slider.options = {\n            display: 1,\n            duration: 0.5,\n            dynamicHeight: false\n        };\n        slider.options = $.extend(slider.options, input);\n        init(slider);\n        // When resize is triggered\n        $(window).on('resize', function(event, params) {\n            // Clear any styles if this slider has become disabled\n            if ($(slider).hasClass('disabled')) {\n                $(slider).removeAttr('style');\n            }\n            // If the slider isn't disabled\n            if (!$(slider).hasClass('disabled')) {\n                // Animate slider to use the height of the slide we're sliding to\n                if (!slider.options.dynamicHeight) {\n                    // Clear any styles on the slider\n                    $(slider).removeAttr('style');\n                    // Loop through all panes and set the container height to the maximum pane height\n                    $(slider).find('.slide-pane').each(function() {\n                        $(this).css('height', 'auto');\n                        var parent = $(slider);\n                        if ($(this).outerHeight(true) > parent.height()) {\n                            parent.height($(this).outerHeight(true));\n                        }\n                        $(this).css('height', '100%');\n                    });\n                }\n                // Only trigger slide resize if this event wasn't triggered by animation\n                if (params === undefined || !params.animation) {\n                    $(slider).trigger('slide-resize');\n                }\n            }\n        });\n        // Trigger resize now to try to position everything\n        $(window).trigger('resize');\n        // Trigger resize again once the window is fully loaded\n        $(window).load(function() {\n            $(window).trigger('resize');\n        });\n        // Convenience event for going to the next pane\n        $(slider).on('slide-next', function() {\n            var current = $(slider).find('.slide-pane.current');\n            var index = current.index();\n            var next = index + 1;\n            if (next >= $(slider).find('.slide-pane').length) next = 0;\n            $(slider).trigger('slide-to', next);\n        });\n        // Convenience event for going to the previous pane\n        $(slider).on('slide-prev', function() {\n            var current = $(slider).find('.slide-pane.current');\n            var index = current.index();\n            var prev = index - 1;\n            if (prev < 0) prev = $(slider).find('.slide-pane').length - 1;\n            $(slider).trigger('slide-to', prev);\n        });\n        $(slider).on('slide-resize', function() {\n            // Find the current pane\n            var current = $(slider).find('.slide-pane.current').index();\n            // Trigger slide to current, fixing any potential difference in positioning\n            $(slider).trigger('slide-to', current);\n        });\n        // Allows sliding to any pane based on its index\n        $(slider).on('slide-to', function(event, input) {\n            var slide = {\n                index: 0,\n                direction: 'left'\n            };\n            // If our request is an object\n            if (typeof input == \"object\") $.extend(slide, input);\n            // Else if the request is simply a number\n            if (input == parseInt(input)) slide.index = input;\n            var from = $(slider).find('.slide-pane.current');\n            var to = $(slider).find('.slide-pane').eq(slide.index);\n            var last = $(slider).find('.slide-pane').length - 1;\n            // If the pane we're moving to comes before the current, move right\n            if (from.index() > to.index()) slide.direction = 'right';\n            // If the pane we're moving to comes after the current, move left\n            if (from.index() < to.index()) slide.direction = 'left';\n            // If we're moving to the last pane from the first\n            if (from.index() == 0 && to.index() == last) slide.direction = 'right';\n            // If we're moving to the first pane from the last\n            if (from.index() == last && to.index() == 0) slide.direction = 'left';\n            if (!slider.animating && !$(slider).hasClass('disabled')) {\n                animate.call(slider, slide);\n                if (typeof slider.options != \"undefined\" && typeof slider.options.slideStart == \"function\") slider.options.slideStart.call(slider);\n            }\n        });\n    };\n\n    /*************************\n     *\n     *  Bind to jQuery\n     *\n     ************************/\n    $.fn.hbSlider = function(options) {\n        for (var i = 0, l = this.length; i < l; i++) {\n            Slider.call(this[i], options);\n        }\n    };\n    \n})(jQuery);","\n// page status\nvar status;\n\n// setup our Page Manager\nvar PageManager = require('../app/page-manager');\nvar pm = new PageManager();\n\n// history-loading\n//  - Remove all event listeners  \n//    and begin exit transition\n$(window).on('history-loading', function(event) {\n    \n    // unbind\n    status = 'loading';\n    $('body').off();\n    $(window).off('resize');\n\n    // animate out\n    $('.js-loading').fadeIn();\n    pm.exit();\n});\n\n// animated-out\n//  - page exit transition finished\n$(window).on('animated-out', function(event) {\n    // Check if page is already loaded\n    if(status == 'loaded') {\n        // Trigger page replacement\n        $(window).trigger('history-replace');\n    } else {\n        status = 'animated';\n    }\n});\n\n// history-loaded\n//  - history ajax request finished\n$(window).on('history-loaded', function(event, response) {\n    $('.js-ajax').css('min-height', $(window).height());\n    \n    // Check if animations are finished\n    if(status == 'animated') {\n        // Trigger page replacement\n        \n        $(window).trigger('history-replace');\n    } else {\n        status = 'loaded';\n    }\n});\n\n// history-ready\n//  - history-replace finished and page is ready\n$(window).on('history-ready', function(event) {\n    $('.js-ajax').css('min-height', $(window).height());\n\n    // find template\n    var $tmpl = $('.js-ajax').find('.js-template');\n        \n    // load template\n    if($tmpl.length) {  \n\n        var title = $tmpl.data('title'),\n            classes = $tmpl.data('body-class'),\n            description = $tmpl.data('description');\n            pageId = $tmpl.data('page'),\n            dataUrl = $tmpl.data('url'),\n            \n            // NOTE: js-no-cache has to be top level in the _.js-template for ($.filter)\n            cache = $($tmpl.html()).filter('.js-no-cache').length ? false : true; \n\n        $('title').html(title);\n        $('body').attr('class', classes);\n        $('meta[name=\"description\"]').attr('content', description);\n\n        pm.enter(pageId, $tmpl.html(), dataUrl, cache);\n    }\n});\n\n// animated-in\n//  - animate in completed, page fully ready\n//    bind events and init plugins, etc...\n$(window).on('animated-in', function(event){\n    // --- bind events dependent on DOM --- //\n\n    // bind ajax button clicks\n    $('body').on('click', 'a', function(event) {\n        if ($(this).data('ajax') !== undefined) {\n            event.preventDefault();\n            var url = $(this).attr('href');\n            $(window).trigger('history-push', url);\n        }\n    });\n\n    // trigger ajax ready for \n    // all includes to bind to\n    $('.js-loading').fadeOut();\n    $(window).trigger('ajax-ready');\n    \n});\n","\n// includes\nrequire('../plugins/slider');\nrequire('../plugins/accordion');\nrequire('../plugins/gallery');\n\n$(window).on('ajax-ready', function(event) {\n\n    // init plugins\n\n    // general js\n    \n});"]}